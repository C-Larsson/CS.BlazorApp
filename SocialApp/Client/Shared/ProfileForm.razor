@inject IProfileService ProfileService
@using SocialApp.Shared.Models
@using Microsoft.AspNetCore.Components.Forms

@if (ProfileService.Profile == null)
{
    <span>
        You haven't specified a profile, yet.
        <button class="btn btn-primary" @onclick="CreateNewProfile">
            <i class="oi oi-person"></i>  Add a profile?
        </button>
    </span>
}
else if (!editProfile)
{
    <div class="profile-container">
        @if (ProfileService.Profile.Image != null)
        {
            <img class="profile-image" src="@ProfileService.Profile.Image.Data" alt="Profile Image"/>
        }
        else
        {
            <img class="profile-image" src="" alt="Profile Image"/>
        }
        <div class="profile-info">
            <h5>Name : @ProfileService.Profile.Name</h5>
            <h5>Bio</h5>
            <p>@ProfileService.Profile.Bio</p>
        </div>
    </div>
    <br />
    <button class="btn btn-primary" @onclick="EditProfile">Edit profile detalis</button>
    <hr />
}
else
{
    <EditForm Model="ProfileService.Profile" OnSubmit="UpdateProfile">
        <div class="mb-3">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="ProfileService.Profile.Name" class="form-control" />
        </div>

         <div class="mb-3" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (ProfileService.Profile.Image != null)
            {
                <MudCard Class="ma-2">
                    <MudCardContent>
                  <MudImage Src="@ProfileService.Profile.Image.Data" />
              </MudCardContent>
              <MudCardActions Style="justify-content: center;">
                  <MudButton Variant="Variant.Filled"
                              Color="Color.Error"
                              OnClick="@(() => RemoveImage())">
                      Remove
                  </MudButton>
              </MudCardActions>
          </MudCard>
          }
      </div>
      <div class="mb-0">
          <label for="images">Image(s)</label>
          <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
      </div>


      <div class="mb-3">
          <label for="bio">Bio</label>
          <InputTextArea id="bio" @bind-Value="ProfileService.Profile.Bio" class="form-control" />
      </div>
 
      <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>

}



@code {

    bool editProfile = false;
    Profile editingProfile = null;

    protected override async Task OnInitializedAsync()
    {
        await ProfileService.GetProfile();
        ProfileService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProfileService.OnChange -= StateHasChanged;
    }

    private void CreateNewProfile()
    {
        editProfile = true;
        editingProfile = ProfileService.CreateNewProfile();
    }

    private void EditProfile()
    {
        editProfile = true;
        editingProfile = ProfileService.Profile;
    }

    private async Task UpdateProfile()
    {
        if (editingProfile.IsNew)
            await ProfileService.AddProfile(editingProfile);
        else
            await ProfileService.UpdateProfile(editingProfile);
        editingProfile = new Profile();
        editProfile = false;

    }

    private async void CancelEdit()
    {
        editingProfile = new Profile();
        await ProfileService.GetProfile();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";

        var image = e.File;
        var resizedImage = await image.RequestImageFileAsync(format, 150, 150);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        ProfileService.Profile.Image = new Image { Data = imageData };
    }

    private void RemoveImage()
    {
        ProfileService.Profile.Image = null;
    }
}


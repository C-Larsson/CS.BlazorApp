@page "/login"
@using Microsoft.AspNetCore.WebUtilities;

@inject IAuthService AuthService
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>

    <div class="form-check">
        <InputCheckbox id="staySignedIn" class="form-check-input" @bind-Value="user.StaySignedIn" />
        <label class="form-check-label" for="staySignedIn">Keep me signed in</label>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
<div class="text-danger">
@errorMessage
</div>

@code {
    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url.First();
        }
    }

    private async void HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
  
            // TODO: Handle StaySignedIn

            NavManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }

    }



}
